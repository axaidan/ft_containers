=========================
=	CONSTRUCTION	=
=========================

===	display_capacity() :
===	CONTEXT : default constructed empty vector
	===	v.empty()	=	true
	===	v.size()	=	0
	===	v.capacity()	=	0
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : default constructed empty vector
	===	NO CONTENT

===	display_capacity() :
===	CONTEXT : fill constructed 10 elems
	===	v.empty()	=	false
	===	v.size()	=	10
	===	v.capacity()	=	10
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : fill constructed 10 elems
	===	v[      0]	=	42
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	42
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	42

===	display_capacity() :
===	CONTEXT : fill constructed 0 elem
	===	v.empty()	=	true
	===	v.size()	=	0
	===	v.capacity()	=	0
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : fill constructed 0 elem
	===	NO CONTENT

===	display_capacity() :
===	CONTEXT : range constructed from v_fill1 begin/end - 2
	===	v.empty()	=	false
	===	v.size()	=	8
	===	v.capacity()	=	8
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : range constructed from v_fill1 begin/end - 2
	===	v[      0]	=	42
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	42
	===	v[      6]	=	42
	===	v[      7]	=	42

===	display_capacity() :
===	CONTEXT : range constructed from v_fill1 begin/begin
	===	v.empty()	=	true
	===	v.size()	=	0
	===	v.capacity()	=	0
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : range constructed from v_fill1 begin/begin
	===	NO CONTENT

===	display_capacity() :
===	CONTEXT : copy constructed from v_fill1
	===	v.empty()	=	false
	===	v.size()	=	10
	===	v.capacity()	=	10
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : copy constructed from v_fill1
	===	v[      0]	=	42
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	42
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	42

===	display_relationals() :
===	CONTEXT : copy constructed from v_fill1
	===	(v1 == v2)	=	true
	===	(v1 != v2)	=	false
	===	(v1 <  v2)	=	false
	===	(v1 <= v2)	=	true
	===	(v1 >  v2)	=	false
	===	(v1 >= v2)	=	true

=========================
=	ASSIGNATION	=
=========================

===	display_capacity() :
===	CONTEXT : vector<T> v1(N, VAL3); v2 = v1; with v1 bigger than v2
	===	v.empty()	=	false
	===	v.size()	=	10
	===	v.capacity()	=	10
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : vector<T> v1(N, VAL3); v2 = v1; with v1 bigger than v2
	===	v[      0]	=	-1
	===	v[      1]	=	-1
	===	v[      2]	=	-1
	===	v[      3]	=	-1
	===	v[      4]	=	-1
	===	v[      5]	=	-1
	===	v[      6]	=	-1
	===	v[      7]	=	-1
	===	v[      8]	=	-1
	===	v[      9]	=	-1

===	display_relationals() :
===	CONTEXT : vector<T> v1(N, VAL3); v2 = v1; with v1 bigger than v2
	===	(v1 == v2)	=	true
	===	(v1 != v2)	=	false
	===	(v1 <  v2)	=	false
	===	(v1 <= v2)	=	true
	===	(v1 >  v2)	=	false
	===	(v1 >= v2)	=	true

===	display_capacity() :
===	CONTEXT : vector<T> v3; v2 = v3; v2 is empty
	===	v.empty()	=	true
	===	v.size()	=	0
	===	v.capacity()	=	10
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : vector<T> v3; v2 = v3; v2 is empty
	===	NO CONTENT

===	display_relationals() :
===	CONTEXT : vector<T> v3; v2 = v3; v2 is empty
	===	(v1 == v2)	=	false
	===	(v1 != v2)	=	true
	===	(v1 <  v2)	=	false
	===	(v1 <= v2)	=	false
	===	(v1 >  v2)	=	true
	===	(v1 >= v2)	=	true

===	display_capacity() :
===	CONTEXT : rand_push_back(v3);
	===	v.empty()	=	false
	===	v.size()	=	20
	===	v.capacity()	=	32
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : rand_push_back(v3);
	===	v[      0]	=	42
	===	v[      1]	=	42
	===	v[      2]	=	1337
	===	v[      3]	=	1337
	===	v[      4]	=	-1
	===	v[      5]	=	1337
	===	v[      6]	=	1337
	===	v[      7]	=	42
	===	v[      8]	=	1337
	===	v[      9]	=	1337
	===	v[     10]	=	1337
	===	v[     11]	=	1337
	===	v[     12]	=	-1
	===	v[     13]	=	-1
	===	v[     14]	=	1337
	===	v[     15]	=	42
	===	v[     16]	=	-1
	===	v[     17]	=	42
	===	v[     18]	=	1337
	===	v[     19]	=	-1

===	display_relationals() :
===	CONTEXT : rand_push_back(v3);
	===	(v1 == v2)	=	false
	===	(v1 != v2)	=	true
	===	(v1 <  v2)	=	true
	===	(v1 <= v2)	=	true
	===	(v1 >  v2)	=	false
	===	(v1 >= v2)	=	false

===	display_capacity() :
===	CONTEXT : v3 = v3; self assignation test
	===	v.empty()	=	false
	===	v.size()	=	20
	===	v.capacity()	=	32
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v3 = v3; self assignation test
	===	v[      0]	=	42
	===	v[      1]	=	42
	===	v[      2]	=	1337
	===	v[      3]	=	1337
	===	v[      4]	=	-1
	===	v[      5]	=	1337
	===	v[      6]	=	1337
	===	v[      7]	=	42
	===	v[      8]	=	1337
	===	v[      9]	=	1337
	===	v[     10]	=	1337
	===	v[     11]	=	1337
	===	v[     12]	=	-1
	===	v[     13]	=	-1
	===	v[     14]	=	1337
	===	v[     15]	=	42
	===	v[     16]	=	-1
	===	v[     17]	=	42
	===	v[     18]	=	1337
	===	v[     19]	=	-1

===	display_capacity() :
===	CONTEXT : v3 = v2 = v1; multiple assignations test
	===	v.empty()	=	true
	===	v.size()	=	0
	===	v.capacity()	=	32
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v3 = v2 = v1; multiple assignations test
	===	NO CONTENT

===	display_relationals() :
===	CONTEXT : v3 = v2 = v1; multiple assignations test
	===	(v1 == v2)	=	true
	===	(v1 != v2)	=	false
	===	(v1 <  v2)	=	false
	===	(v1 <= v2)	=	true
	===	(v1 >  v2)	=	false
	===	(v1 >= v2)	=	true

===	display_relationals() :
===	CONTEXT : v3 = v2 = v1; multiple assignations test
	===	(v1 == v2)	=	true
	===	(v1 != v2)	=	false
	===	(v1 <  v2)	=	false
	===	(v1 <= v2)	=	true
	===	(v1 >  v2)	=	false
	===	(v1 >= v2)	=	true

=================================
=	CAPACITY CHANGES	=
=================================

===	vector<T> v; rand_push_back(v);
===	display_capacity() :
===	CONTEXT : v.resize(v.size() / 2); resizing with (n < size)
	===	v.empty()	=	false
	===	v.size()	=	10
	===	v.capacity()	=	32
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v.resize(v.size() / 2); resizing with (n < size)
	===	v[      0]	=	-1
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	1337
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	-1

===	display_capacity() :
===	CONTEXT : v.resize(v.size() * 3); resizing with (n > size)
	===	v.empty()	=	false
	===	v.size()	=	30
	===	v.capacity()	=	32
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v.resize(v.size() * 3); resizing with (n > size)
	===	v[      0]	=	-1
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	1337
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	-1
	===	v[     10]	=	1337
	===	v[     11]	=	1337
	===	v[     12]	=	1337
	===	v[     13]	=	1337
	===	v[     14]	=	1337
	===	v[     15]	=	1337
	===	v[     16]	=	1337
	===	v[     17]	=	1337
	===	v[     18]	=	1337
	===	v[     19]	=	1337
	===	v[     20]	=	1337
	===	v[     21]	=	1337
	===	v[     22]	=	1337
	===	v[     23]	=	1337
	===	v[     24]	=	1337
	===	v[     25]	=	1337
	===	v[     26]	=	1337
	===	v[     27]	=	1337
	===	v[     28]	=	1337
	===	v[     29]	=	1337

===	display_capacity() :
===	CONTEXT : v.resize(v.capacity() * 2); resizing with (n > capacity)
	===	v.empty()	=	false
	===	v.size()	=	35
	===	v.capacity()	=	60
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v.resize(v.capacity() * 2); resizing with (n > capacity)
	===	v[      0]	=	-1
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	1337
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	-1
	===	v[     10]	=	1337
	===	v[     11]	=	1337
	===	v[     12]	=	1337
	===	v[     13]	=	1337
	===	v[     14]	=	1337
	===	v[     15]	=	1337
	===	v[     16]	=	1337
	===	v[     17]	=	1337
	===	v[     18]	=	1337
	===	v[     19]	=	1337
	===	v[     20]	=	1337
	===	v[     21]	=	1337
	===	v[     22]	=	1337
	===	v[     23]	=	1337
	===	v[     24]	=	1337
	===	v[     25]	=	1337
	===	v[     26]	=	1337
	===	v[     27]	=	1337
	===	v[     28]	=	1337
	===	v[     29]	=	1337
	===	v[     30]	=	42
	===	v[     31]	=	42
	===	v[     32]	=	42
	===	v[     33]	=	42
	===	v[     34]	=	42

===	v.resize(N);
===	display_capacity() :
===	CONTEXT : v.reserve(v.capacity() + 1); reserving one more elem
	===	v.empty()	=	false
	===	v.size()	=	10
	===	v.capacity()	=	61
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v.reserve(v.capacity() + 1); reserving one more elem
	===	v[      0]	=	-1
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	1337
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	-1

===	display_capacity() :
===	CONTEXT : v.reserve(v.capacity()); reserving same capacity
	===	v.empty()	=	false
	===	v.size()	=	10
	===	v.capacity()	=	61
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v.reserve(v.capacity()); reserving same capacity
	===	v[      0]	=	-1
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	1337
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	-1

===	display_capacity() :
===	CONTEXT : v.reserve(v.capacity() - 1); reserving lesser capacity
	===	v.empty()	=	false
	===	v.size()	=	10
	===	v.capacity()	=	61
	===	v.max_size()	=	4611686018427387903

===	display_content() :
===	CONTEXT : v.reserve(v.capacity() - 1); reserving lesser capacity
	===	v[      0]	=	-1
	===	v[      1]	=	42
	===	v[      2]	=	42
	===	v[      3]	=	42
	===	v[      4]	=	42
	===	v[      5]	=	1337
	===	v[      6]	=	42
	===	v[      7]	=	42
	===	v[      8]	=	42
	===	v[      9]	=	-1

